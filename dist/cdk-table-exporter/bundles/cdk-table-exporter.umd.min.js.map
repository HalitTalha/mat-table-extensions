{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/export-type.ts","ng://cdk-table-exporter/lib/mime.ts","ng://cdk-table-exporter/lib/constants.ts","ng://cdk-table-exporter/lib/file-util.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","ng://cdk-table-exporter/lib/services/service-locator.service.ts","ng://cdk-table-exporter/lib/services/data-extractor.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","CdkTableExporterModule","NgModule","args","declarations","imports","CdkTableModule","exports","XLS","XLSX","CSV","TXT","JSON","OTHER","Mime","extension","contentTypeHeader","CONTENT_TYPE_TEXT","ExportType","P","EXTENSION_XLS","EXTENSION_XLSX","EXTENSION_CSV","EXTENSION_JSON","EXTENSION_TEXT","MIME_EXCEL_XLS","CONTENT_TYPE_EXCEL","MIME_EXCEL_XLSX","MIME_JSON","CHAR_SET_UTF","MIME_TXT","MIME_CSV","XLS_REGEX","FileUtil","save","content","mime","options","blob","Blob","type","fileName","FileSaver.saveAs","isXls","toLowerCase","match","identifyExportType","removeExtension","split","CdkTableExporter","renderer","serviceLocator","dataExtractor","table","viewContainerRef","exportCompleted","EventEmitter","exportStarted","initCdkTable","defineProperty","_cdkTable","value","console","warn","_exporterButton","setButtonListener","_fileName","_sheetName","componentView","component","Error","initExporterService","exportType","exporter","getService","_this","listen","_elementRef","nativeElement","evt","sheet","exportTable","exportTypeParam","correctExportType","_options","emit","_isIterating","_isExporting","_data","enableExportButton","extractTableHeader","exportWithPagination","notPaginated","exportSinglePage","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","extractTableFooter","exportExtractedData","concat","extractRows","hiddenColumns","_subscription","getPageChangeObservable","subscribe","setTimeout","hasNextPage","nextPage","export","extractSpecialRow","outlet","row","extractRow","push","_headerRowOutlet","_footerRowOutlet","getPageCount","setProperty","Input","Output","JsonExporterService","rows","jsonContent","stringify","Injectable","providedIn","WorksheetExporter","worksheet","XLSX.utils","json_to_sheet","skipHeader","writeToFile","createContent","mimeType","getMimeType","TxtExporterService","_super","call","tslib_1.__extends","sheet_to_txt","XlsExporterService","workBook","book_new","correctType","book_append_sheet","XLSX.write","XlsxExporterService","CsvExporterService","sheet_to_csv","ServiceLocatorService","injector","get","Injector","DataExtractorService","cdkTable","getRowsAsJsonArray","_rowOutlet","renderedRows","getRenderedRows","convertToJsonArray","_getRenderedRows","result","i","length","convertRow","createExcelItem","cells","children","shouldHide","element","item","innerText","columnIndex","includes","assign","CONTENT_TYPE_APPLICATION"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CdkTableModule\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","export enum ExportType {\n  XLS = 'xls',\n  XLSX = 'xlsx',\n  CSV = 'csv',\n  TXT = 'txt',\n  JSON = 'json',\n  OTHER = 'other'\n}\n","export class Mime {\n\n  extension: string;\n  contentTypeHeader: string;\n\n  constructor(extension: string, contentTypeHeader: string) {\n    this.extension = extension;\n    this.contentTypeHeader = contentTypeHeader;\n  }\n\n}\n","import { ExportType } from './export-type';\nimport { Mime } from './mime';\n\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\nexport const TYPE_ARRAY = 'array';\nexport const CHAR_SET_UTF = ';charset=utf-';\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\nexport const CHAR_SET_UTF_16 = CHAR_SET_UTF + '16';\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\nexport const CONTENT_TYPE_APPLICATION = 'application/';\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\nexport const P = '.';\nexport const EXTENSION_XLS = P + ExportType.XLS;\nexport const EXTENSION_XLSX =  P + ExportType.XLSX;\nexport const EXTENSION_CSV =  P + ExportType.CSV;\nexport const EXTENSION_JSON =  P + ExportType.JSON;\nexport const EXTENSION_TEXT =  P + ExportType.TXT;\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_16);\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\nexport const REF = '!ref';\nexport const XLS_REGEX = P + '*\\.' + ExportType.XLS + '$';\n\n","import { ExportType } from './export-type';\nimport * as FileSaver from 'file-saver';\nimport { MAT_TABLE_EXPORTER, P, XLS_REGEX } from './constants';\nimport { Mime } from './mime';\nimport { Options } from './options';\n\nexport class FileUtil {\n  public static save(content: string, mime: Mime, options?: Options) {\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\n    let fileName = MAT_TABLE_EXPORTER;\n    if (options && options.fileName) {\n      fileName = options.fileName;\n    }\n    FileSaver.saveAs(blob, fileName + mime.extension);\n  }\n\n  public static isXls(fileName: string): boolean {\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\n  }\n\n  public static identifyExportType(fileName?: string): ExportType {\n    if (fileName && FileUtil.isXls(fileName)) {\n      return ExportType.XLS;\n    } else {\n      return ExportType.XLSX;\n    }\n  }\n\n  public static removeExtension(options?: Options) {\n    options.fileName = options.fileName.split(P)[0];\n  }\n}\n","import { DataRowOutlet } from '@angular/cdk/table';\nimport { EventEmitter, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ExportType } from './export-type';\nimport { FileUtil } from './file-util';\nimport { ExcelOptions, Options } from './options';\nimport { DataExtractorService } from './services/data-extractor.service';\nimport { Exporter } from './services/exporters/exporter';\nimport { ServiceLocatorService } from './services/service-locator.service';\n\n\n/**\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\n */\n// @Directive()\nexport abstract class CdkTableExporter {\n\n\n  @Input() hiddenColumns?: Array<number>;\n  @Input() exporter?: Exporter<Options>;\n  @Output() exportCompleted ?= new EventEmitter<void>();\n  @Output() exportStarted ?= new EventEmitter<void>();\n\n  private _cdkTable: any;\n\n  get cdkTable(): any {\n    return this._cdkTable;\n  }\n\n/**\n * @deprecated\n */\n  @Input()\n  set cdkTable(value: any) {\n    console.warn('cdkTable input is deprecated!');\n    this._cdkTable = value;\n  }\n\n  private _exporterButton: any;\n\n  get exporterButton(): any {\n    return this._exporterButton;\n  }\n\n  /**\n   * @deprecated\n   */\n  @Input()\n  set exporterButton(value: any) {\n    console.warn('exporterButton input is deprecated!');\n    this._exporterButton = value;\n    this.setButtonListener();\n  }\n\n  private _fileName: string;\n\n  get fileName(): string {\n    return this._fileName;\n  }\n\n/**\n * @deprecated\n */\n  @Input()\n  set fileName(value: string) {\n    console.warn('fileName input is deprecated!');\n    this._fileName = value;\n  }\n\n  private _sheetName: string;\n\n  get sheetName(): string {\n    return this._sheetName;\n  }\n\n/**\n * @deprecated\n */\n  @Input()\n  set sheetName(value: string) {\n    console.warn('sheetName input is deprecated!');\n    this._sheetName = value;\n  }\n\n\n  /**\n   * Data array which is extracted from nativeTable\n   */\n  private _data: Array<any>;\n\n  private _isIterating: boolean;\n\n  private _initialPageIndex: number;\n\n  private _isExporting: boolean;\n\n  private _subscription: Subscription;\n\n  private _options?: Options;\n\n  constructor(protected renderer: Renderer2,\n              private serviceLocator: ServiceLocatorService,\n              private dataExtractor: DataExtractorService,\n              protected table: any,\n              protected viewContainerRef: ViewContainerRef) {\n    this.initCdkTable();\n  }\n\n  /**\n   * Must return the number of pages of the table\n   */\n  public abstract getPageCount(): number;\n\n  /**\n   * Must return the index of the current page that's displayed\n   */\n  public abstract getCurrentPageIndex(): number;\n\n  /**\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\n   * @param index page index\n   */\n  public abstract goToPage(index: number): void;\n\n  /**\n   * Must return an observable that notifies the subscribers about page changes\n   */\n  public abstract getPageChangeObservable(): Observable<any>;\n\n  private initCdkTable() {\n    // tslint:disable-next-line:no-string-literal\n    const table = this.viewContainerRef['_data'].componentView.component;\n    if (table) {\n      this._cdkTable = table;\n    } else if (this.table) {\n      this._cdkTable = this.table;\n    } else {\n      throw new Error('Unsupported Angular version');\n    }\n  }\n\n  private initExporterService(exportType?: ExportType) {\n    if (exportType !== ExportType.OTHER) {\n      this.exporter = this.serviceLocator.getService(exportType);\n    }\n  }\n\n  private setButtonListener() {\n    if (this._exporterButton) {\n      this.renderer.listen(this._exporterButton._elementRef.nativeElement, 'click', (evt) => {\n        const options = {fileName: this._fileName, sheet: this._sheetName} as ExcelOptions;\n        this.exportTable(FileUtil.identifyExportType(this._fileName), options); // this is to support deprecated way of exporting\n      });\n    }\n  }\n\n  /**\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\n   */\n  exportTable(exportTypeParam?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options) {\n    const exportType: ExportType = this.correctExportType(exportTypeParam);\n    this.initExporterService(exportType);\n    this._options = options;\n    this.exportStarted.emit();\n    this._isIterating = true;\n    this._isExporting = true;\n    this._data = new Array<any>();\n    this.enableExportButton(false);\n    this.extractTableHeader();\n    try {\n      this.exportWithPagination();\n    } catch (notPaginated) {\n      this.exportSinglePage();\n    }\n  }\n  private correctExportType(exportTypeParam?: any): ExportType {\n    if (exportTypeParam && typeof exportTypeParam === 'string') {\n      switch (exportTypeParam) {\n        case ExportType.CSV:\n            return ExportType.CSV;\n        case ExportType.JSON:\n            return ExportType.JSON;\n        case ExportType.OTHER:\n            return ExportType.OTHER;\n        case ExportType.TXT:\n            return ExportType.TXT;\n        case ExportType.XLS:\n            return ExportType.XLS;\n        case ExportType.XLSX:\n            return ExportType.XLSX;\n      }\n    } else {\n      return exportTypeParam as ExportType;\n    }\n  }\n\n  private exportWithPagination() {\n    this._initialPageIndex = this.getCurrentPageIndex();\n    this.initPageHandler();\n    this.goToPage(0);\n  }\n\n  private exportSinglePage() {\n    this.extractDataOnCurrentPage();\n    this.extractTableFooter();\n    this.exportExtractedData();\n  }\n\n  private extractDataOnCurrentPage() {\n    this._data = this._data.concat(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns));\n  }\n\n  private initPageHandler(): void {\n    if (!this._subscription) {\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\n        setTimeout(() => {\n          if (this._isIterating) {\n            this.extractDataOnCurrentPage();\n            if (this.hasNextPage()) {\n              this.nextPage();\n            } else {\n              this._isIterating = false;\n              this.goToPage(this._initialPageIndex);\n            }\n          } else if (this._isExporting) {\n            this._isExporting = false;\n            this.extractTableFooter();\n            this.exportExtractedData();\n          }\n        });\n      });\n    }\n  }\n\n  private exportExtractedData() {\n    this.exporter.export(this._data, this._options);\n    this._data = new Array<any>();\n    this.enableExportButton(true);\n    this.exportCompleted.emit();\n  }\n\n  private extractSpecialRow(outlet: DataRowOutlet) {\n    const row = this.dataExtractor.extractRow(this._cdkTable, this.hiddenColumns, outlet);\n    if (row) {\n      this._data.push(row);\n    }\n  }\n\n  private extractTableHeader() {\n    this.extractSpecialRow(this._cdkTable._headerRowOutlet);\n  }\n\n  private extractTableFooter() {\n    this.extractSpecialRow(this._cdkTable._footerRowOutlet);\n  }\n\n  public hasNextPage(): boolean {\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public nextPage(): void {\n    this.goToPage(this.getCurrentPageIndex() + 1);\n  }\n\n  private enableExportButton(value: boolean) {\n    if (this._exporterButton) {\n      this.renderer.setProperty(this._exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\n    }\n  }\n}\n\n","import { MIME_JSON } from './../../constants';\nimport { Exporter } from './exporter';\nimport { Injectable } from '@angular/core';\nimport { Options } from '../../options';\nimport { FileUtil } from '../../file-util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonExporterService implements Exporter<Options> {\n\n  constructor() {\n  }\n\n  public export(rows: any[], options?: Options) {\n    const jsonContent = JSON.stringify(rows);\n    FileUtil.save(jsonContent, MIME_JSON, options);\n  }\n}\n","import * as XLSX from 'xlsx';\nimport { Options } from '../../options';\nimport { Exporter } from './exporter';\nimport { FileUtil } from '../../file-util';\nimport { Mime } from '../../mime';\n\n/**\n * An angular service class that is used to create files out of json object arrays.\n */\nexport abstract class WorksheetExporter<T extends Options> implements Exporter<T> {\n  constructor() {}\n\n  public export(rows: Array<any>, options?: T) {\n    if (!rows) {\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\n    }\n    const worksheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we don't want to see object properties as our headers\n    });\n    this.writeToFile(worksheet, options);\n  }\n\n  public writeToFile(worksheet: XLSX.WorkSheet, options?: T) {\n    const content = this.createContent(worksheet, options);\n    const mimeType = this.getMimeType();\n    FileUtil.save(content, mimeType, options);\n  }\n\n  public abstract createContent(worksheet: XLSX.WorkSheet, options?: T): any;\n  public abstract getMimeType(): Mime;\n\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { Options } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { MIME_TXT } from './../../constants';\nimport { Mime } from '../../mime';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TxtExporterService extends WorksheetExporter<Options>  {\n\n  constructor() {\n    super();\n   }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_txt(worksheet);\n  }\n  public getMimeType(): Mime {\n    return MIME_TXT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { MIME_EXCEL_XLS, TYPE_ARRAY } from '../../constants';\nimport { Mime } from '../../mime';\nimport { ExcelOptions } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: ExcelOptions): any {\n    const workBook = XLSX.utils.book_new();\n    if (!options) {\n      options = {} as ExcelOptions;\n    }\n    this.correctType(options);\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\n    return XLSX.write(workBook, options);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLS;\n  }\n\n  private correctType(options: ExcelOptions) {\n    if (!options.type) {\n      options.type = TYPE_ARRAY;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { XlsExporterService } from './xls-exporter.service';\nimport { Mime } from '../../mime';\nimport { MIME_EXCEL_XLSX } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsxExporterService extends XlsExporterService {\n\n  constructor() {\n    super();\n  }\n\n  // override\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLSX;\n  }\n}\n","import { MIME_CSV } from './../../constants';\nimport { Options } from '../../options';\nimport { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { Mime } from '../../mime';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvExporterService extends WorksheetExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_csv(worksheet);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_CSV;\n  }\n}\n","import { CsvExporterService } from './exporters/csv-exporter.service';\nimport { TxtExporterService } from './exporters/txt-exporter.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { Options } from '../options';\nimport { ExportType } from './../export-type';\nimport { Exporter } from './exporters/exporter';\nimport { XlsExporterService } from './exporters/xls-exporter.service';\nimport { JsonExporterService } from './exporters/json-exporter.service';\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLocatorService {\n\n  constructor(private injector: Injector) { }\n\n  public getService(exportType: ExportType): Exporter<Options> {\n    switch (exportType) {\n      case ExportType.XLS:\n        return this.injector.get<XlsExporterService>(XlsExporterService);\n      case ExportType.XLSX:\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\n      case ExportType.JSON:\n        return this.injector.get<JsonExporterService>(JsonExporterService);\n      case ExportType.TXT:\n        return this.injector.get<TxtExporterService>(TxtExporterService);\n      case ExportType.CSV:\n        return this.injector.get<CsvExporterService>(CsvExporterService);\n      default:\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataRowOutlet } from '@angular/cdk/table';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataExtractorService {\n\n  constructor() { }\n\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, cdkTable._rowOutlet);\n  }\n\n  public extractRow(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet)[0];\n  }\n\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\n  }\n\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\n  }\n\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\n    const result = new Array<any>();\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < rows.length; i++) {\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\n      result.push(this.createExcelItem(row));\n    }\n    return result;\n  }\n\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\n    const result = new Array<string>();\n    const cells: any = row.children;\n    for (let i = 0; i < cells.length; i++) {\n      if (!this.shouldHide(hiddenColumns, i)) {\n        const element = cells.item(i).innerText;\n        result.push(element);\n      }\n    }\n    return result;\n  }\n\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private createExcelItem(row: Array<string>): any {\n    return Object.assign({}, row);\n  }\n}\n"]}