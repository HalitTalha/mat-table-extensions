{"version":3,"sources":["ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts"],"names":["EQUALS","ANYWHERE","STARTS_WITH","ENDS_WITH","MatTableFilterService","prototype","filterPredicate","exampleEntity","item","filterType","caseSensitive","exampleEntityObjectKeys","Object","keys","i","length","exampleColumn","exampleColumnValue","itemColumnValue","Array","this","isAlphaNumeric","filterPredicateAlphaNumeric","isBoolean","exampleString","toString","itemString","toUpperCase","result","MatTableFilter","includes","startsWith","endsWith","value","Injectable","args","providedIn","MatTableFilterDirective","_filterService","_injectedTable","_viewContainerRef","debounceTime","initCdkTable","initDebounceSubject","ngDoCheck","isExampleEntityChanged","_oldExampleEntity","toPlainJson","_exampleEntitySubject","next","LODASH.isEqual","object","JSON","parse","stringify","table","componentView","component","_table","Error","_this_1","BehaviorSubject","pipe","subscribe","_","updateFilterPredicate","matDataSource","getMatDataSource","_this_2","data","filter","Directive","selector","exportAs","MatTable","decorators","type","Host","Self","Optional","ViewContainerRef","Input","MatTableFilterModule","NgModule","declarations","imports","MatTableModule","exports"],"mappings":"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","sourcesContent":["export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { Injectable } from '@angular/core';\nimport { MatTableFilter } from './mat-table-filter.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor() {}\n\n  public filterPredicate(exampleEntity: any, item: any, filterType: MatTableFilter, caseSensitive: boolean): boolean {\n    const exampleEntityObjectKeys = Object.keys(exampleEntity);\n    for (let i = 0; i < exampleEntityObjectKeys.length; i++) {\n      const exampleColumn = exampleEntityObjectKeys[i];\n      const exampleColumnValue = exampleEntity[exampleColumn];\n      const itemColumnValue = item[exampleColumn];\n      if (!exampleColumnValue || exampleColumnValue instanceof Array) {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        // also if there is an array property we are skipping\n        continue;\n      }\n      if (itemColumnValue) {\n        // if example entity has additional columns then search fails\n        if (this.isAlphaNumeric(itemColumnValue)) {\n          if (!this.filterPredicateAlphaNumeric(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            return false;\n          }\n        } else if (this.isBoolean(itemColumnValue)) {\n          if (itemColumnValue !== exampleColumnValue) {\n            return false;\n          }\n        } else {\n          if (!this.filterPredicate(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n            // however if it returns false then the item must not be in the list\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private filterPredicateAlphaNumeric(\n    exampleColumnValue: number | string,\n    itemColumnValue: number | string,\n    filterType: MatTableFilter,\n    caseSensitive: boolean\n  ): boolean {\n    let exampleString = exampleColumnValue.toString();\n    let itemString = itemColumnValue.toString();\n    if (!caseSensitive) {\n      exampleString = exampleString.toUpperCase();\n      itemString = itemString.toUpperCase();\n    }\n    let result = true;\n    switch (filterType) {\n      case MatTableFilter.EQUALS:\n        if (exampleColumnValue !== itemColumnValue) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ANYWHERE:\n        if (!itemString.includes(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.STARTS_WITH:\n        if (!itemString.startsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ENDS_WITH:\n        if (!itemString.endsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  private isAlphaNumeric(value: any) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  private isBoolean(value: any) {\n    return typeof value === 'boolean';\n  }\n}\n","import { Directive, DoCheck, Input, ViewContainerRef, Host, Self, Optional } from '@angular/core';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { MatTableFilter } from './mat-table-filter.enum';\nimport { MatTableFilterService } from './mat-table-filter.service';\nimport * as LODASH from 'lodash';\n@Directive({\n  selector: '[matTableFilter]',\n  exportAs: 'matTableFilter'\n})\nexport class MatTableFilterDirective implements DoCheck {\n\n  private _oldExampleEntity: any;\n\n  @Input() exampleEntity: any;\n\n  /**\n   * in millis\n   */\n  private _table: any;\n  @Input() debounceTime = 400;\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\n  @Input() caseSensitive = false;\n\n  private _exampleEntitySubject: BehaviorSubject<void>;\n\n\n  constructor(private _filterService: MatTableFilterService,\n              @Host() @Self() @Optional() private _injectedTable: MatTable<any>,\n              private _viewContainerRef: ViewContainerRef) {\n              this.initCdkTable();\n              this.initDebounceSubject();\n  }\n\n  ngDoCheck(): void {\n    if (this.isExampleEntityChanged()) {\n      this._oldExampleEntity = this.toPlainJson(this.exampleEntity);\n      this._exampleEntitySubject.next();\n    }\n  }\n\n  private isExampleEntityChanged(): boolean {\n    return !LODASH.isEqual(this._oldExampleEntity, this.toPlainJson(this.exampleEntity));\n  }\n\n  private toPlainJson(object: any): JSON {\n    if (object) {\n      return JSON.parse(JSON.stringify(object));\n    } else {\n      return undefined;\n    }\n  }\n\n  private initCdkTable() {\n    // tslint:disable-next-line:no-string-literal\n    const table = this._viewContainerRef['_data'].componentView.component;\n    if (table) {\n      this._table = table;\n    } else if (this._injectedTable) {\n      this._table = this._injectedTable;\n    } else {\n      throw new Error('Unsupported Angular version');\n    }\n  }\n\n  private initDebounceSubject() {\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\n    this._exampleEntitySubject.pipe(\n     debounceTime(this.debounceTime))\n     .subscribe(_ => {\n       this.updateFilterPredicate();\n     });\n  }\n\n  private updateFilterPredicate() {\n    const matDataSource = this.getMatDataSource();\n    if (matDataSource) {\n      const _this = this;\n      matDataSource.filterPredicate = (data): boolean => {\n        return _this._filterService.filterPredicate(_this.exampleEntity, data, _this.filterType, _this.caseSensitive);\n      }\n      matDataSource.filter = this.exampleEntity as any;\n    }\n\n  }\n\n  private getMatDataSource(): MatTableDataSource<any> {\n    const matTable = this._table as MatTable<any>;\n    return (matTable.dataSource as MatTableDataSource<any>);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n"]}